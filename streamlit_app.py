# -*- coding: utf-8 -*-
"""Streamline QBR

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kvt7azB554u0PXbuJN6lNFzY0m5Lekf_
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tempfile
import os
from google.cloud import bigquery
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2 import service_account
import openai

# ---- SETUP ----
st.set_page_config(page_title="QBR Copilot", layout="centered")
st.title("ü§ñ QBR Copilot")

# ---- SIDEBAR CONFIG ----
st.sidebar.header("Settings")

# Inputs
gpt_api_key = st.sidebar.text_input("üîë OpenAI API Key", type="password")
credentials_json = st.sidebar.file_uploader("üìÅ Upload Google Service Account JSON", type="json")
bot_id = st.text_input("Enter Bot ID", placeholder="e.g. at1551-atacadao-wa-br")
generate = st.button("üöÄ Generate QBR Presentation")

# ---- MAIN WORK ----
if generate:
    if not gpt_api_key or not credentials_json or not bot_id:
        st.error("Please provide all inputs.")
        st.stop()

    # ---- Auth ----
    with tempfile.NamedTemporaryFile(delete=False, suffix=".json") as tmp:
        tmp.write(credentials_json.read())
        tmp.flush()
        gcp_creds = service_account.Credentials.from_service_account_file(
            tmp.name,
            scopes=[
                'https://www.googleapis.com/auth/bigquery',
                'https://www.googleapis.com/auth/drive',
                'https://www.googleapis.com/auth/presentations'
            ]
        )

    openai.api_key = gpt_api_key
    bq_client = bigquery.Client(credentials=gcp_creds, project="commerce-sandbox")
    drive_service = build('drive', 'v3', credentials=gcp_creds)
    slides_service = build('slides', 'v1', credentials=gcp_creds)

    # ---- Query BQ ----
    st.info("Querying BigQuery...")
    query = f"""
    SELECT *
    FROM `commerce-sandbox.DWH_STAGE.summary_bot_monthly_metrics`
    WHERE bot_id = '{bot_id}'
    ORDER BY month
    """
    df = bq_client.query(query).to_dataframe()
    df['month'] = pd.to_datetime(df['month'])

    # ---- Plotting ----
    metrics = {
        "Store Registrations Over Time": "stores",
        "Orders Over Time": "pedidos",
        "GMV Over Time": "gmv",
        "Stores with Orders Over Time": "lojas_compradoras",
        "Campaigns Sent": "cont_campanha",
        "Responses Received": "response_count",
        "Messages Delivered": "delivered_count"
    }

    sns.set(style="whitegrid")
    chart_paths = []

    def plot_metric(df, column, title):
        fig, ax = plt.subplots(figsize=(10, 4))
        sns.lineplot(data=df, x="month", y=column, marker="o", ax=ax)
        ax.set_title(title)
        ax.set_xlabel("Month")
        ax.set_ylabel(column.replace("_", " ").title())
        fig.tight_layout()
        return fig

    def generate_gpt_comment(title, df, column):
        df = df[['month', column]].dropna().tail(6)
        prompt = f"""You're a data analyst preparing a QBR slide for the metric '{title}'.\n
Here's the recent data:

{df.to_markdown(index=False)}

Write 1-2 bullet point insights about this trend, focusing on business impact.
"""
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            return response.choices[0].message.content
        except Exception as e:
            return "Insight not available."

    # ---- Create Slides ----
    presentation = slides_service.presentations().create(body={
        'title': f'QBR - {bot_id}'
    }).execute()
    presentation_id = presentation['presentationId']

    st.success("Generating slides...")

    for title, column in metrics.items():
        fig = plot_metric(df, column, title)

        # Save chart
        tmp_chart = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        fig.savefig(tmp_chart.name)
        tmp_chart.flush()

        # Upload to Drive
        media = MediaFileUpload(tmp_chart.name, mimetype='image/png')
        file_metadata = {'name': os.path.basename(tmp_chart.name), 'mimeType': 'image/png'}
        uploaded = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
        file_id = uploaded['id']
        drive_service.permissions().create(fileId=file_id, body={'type': 'anyone', 'role': 'reader'}).execute()
        image_url = f"https://drive.google.com/uc?export=view&id={file_id}"

        # Create Slide
        slide_resp = slides_service.presentations().batchUpdate(
            presentationId=presentation_id,
            body={'requests': [{'createSlide': {'slideLayoutReference': {'predefinedLayout': 'BLANK'}}}]}
        ).execute()
        slide_id = slide_resp['replies'][0]['createSlide']['objectId']

        # Insert image
        slides_service.presentations().batchUpdate(
            presentationId=presentation_id,
            body={"requests": [{
                "createImage": {
                    "url": image_url,
                    "elementProperties": {
                        "pageObjectId": slide_id,
                        "size": {
                            "height": {"magnitude": 4000000, "unit": "EMU"},
                            "width": {"magnitude": 6000000, "unit": "EMU"}
                        },
                        "transform": {
                            "scaleX": 1,
                            "scaleY": 1,
                            "translateX": 1000000,
                            "translateY": 1000000,
                            "unit": "EMU"
                        }
                    }
                }
            }]}
        ).execute()

        # GPT Insight
        gpt_text = generate_gpt_comment(title, df, column)
        box_id = f"box_{column}"
        slides_service.presentations().batchUpdate(
            presentationId=presentation_id,
            body={"requests": [
                {
                    "createShape": {
                        "objectId": box_id,
                        "shapeType": "TEXT_BOX",
                        "elementProperties": {
                            "pageObjectId": slide_id,
                            "size": {
                                "height": {"magnitude": 2000000, "unit": "EMU"},
                                "width": {"magnitude": 3000000, "unit": "EMU"}
                            },
                            "transform": {
                                "scaleX": 1,
                                "scaleY": 1,
                                "translateX": 7500000,
                                "translateY": 1000000,
                                "unit": "EMU"
                            }
                        }
                    }
                },
                {
                    "insertText": {
                        "objectId": box_id,
                        "text": gpt_text,
                        "insertionIndex": 0
                    }
                }
            ]}
        ).execute()

    # ---- Final Output ----
    st.success("‚úÖ QBR Presentation Created!")
    st.markdown(f"[üìà View Slides](https://docs.google.com/presentation/d/{presentation_id}/edit)")